# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# settings

type BetMap {
  id: Int!
  name: String!
}

type LeagueSettings {
  id: String!
  currentYear: Int!
  currentWeek: Int!
  playerBets: [BetMap]!
  teamBets: [BetMap]!
  betEquations: [BetMap]!
}

# betting

type Bet {
  id: ID!
  createdAt: Timestamp
  sourceFk: String!
  proposer: User
  recipient: User
  acceptFk: String
  proposerReplyFk: String
  recipientReplyFk: String
  expiresAt: Timestamp
  finalizedAt: Timestamp
  equations: [Equation]!
  betStatus: BetStatus
  betResult: BetResult
}

type Equation {
  id: Int!
  expressions: [Expression]!
  operator: BetMap
  result: Boolean
}

type BetResult {
  winner: User!
  loser: User!
  response: String!
  responseFk: String
  decidedAt: Timestamp!
}

# Expressions

interface Expression {
  id: Int!
  isLeft: Boolean!
  value: Float
}

type StaticExpression implements Expression {
  id: Int!
  isLeft: Boolean!
  value: Float
}

type PlayerExpression implements Expression {
  id: Int!
  isLeft: Boolean!
  player: Player
  game: Game
  value: Float
  metric: BetMap
}

type TeamExpression implements Expression {
  id: Int!
  isLeft: Boolean!
  team: Team
  game: Game
  value: Float
  metric: BetMap
}

union ExpressionUnion @goModel(model: "bet-hound/cmd/types.ExpressionUnion") =
    StaticExpression
  | PlayerExpression
  | TeamExpression

# Subjects

interface Subject {
  id: ID!
  leagueId: String!
  fk: String!
  name: String!
  url: String!
  updatedAt: Timestamp
  game: Game
}

type Player implements Subject {
  id: ID!
  leagueId: String!
  fk: String!
  name: String!
  url: String!
  updatedAt: Timestamp
  game: Game
  firstName: String!
  lastName: String!
  teamFk: String
  teamName: String
  teamShort: String
  position: String
}

type Team implements Subject {
  id: ID!
  leagueId: String!
  fk: String!
  name: String!
  url: String!
  updatedAt: Timestamp
  game: Game
  shortName: String!
  location: String!
}

union SubjectUnion @goModel(model: "SubjectUnion") = Player | Team

# games

type Game {
  id: ID!
  leagueId: String!
  name: String!
  fk: String
  url: String
  awayTeamFk: String
  awayTeamName: String
  homeTeamFk: String
  homeTeamName: String
  gameTime: Timestamp
  gameResultsAt: Timestamp
  final: Boolean
  week: Int
  year: Int
}

# users

type TwitterUser {
  id: Int!
  screenName: String!
  name: String!
  idStr: String!
  indices: [Int]
}

type User {
  id: ID!
  name: String
  userName: String!
  email: String
  twitterUser: TwitterUser
  notifications: [Notification]!
  viewedProfileLast: Timestamp
  betsWon: Int!
  betsLost: Int!
  inProgressBetIds: [String]!
  pendingYouBetIds: [String]!
  pendingThemBetIds: [String]!
}

type Notification {
  id: ID
  sentAt: Timestamp!
  title: String!
  type: String!
  message: String
}

# rotoworld

type RotoArticle {
  id: ID!
  imgSrc: String
  playerName: String!
  position: String
  team: String
  title: String!
  article: String!
  scrapedAt: Timestamp
}

# graphql

type Query {
  signIn(userName: String!, password: String!): User!
  leagueSettings(id: String!): LeagueSettings!
  currentBets: [Bet!]!
  bets: [Bet!]!
  bet(id: ID!): Bet
  currentRotoArticles(id: String!): [RotoArticle]!
  currentGames: [Game]
  findGames(team: String, gameTime: Timestamp, week: Int, year: Int): [Game]!
  findPlayers(name: String, team: String, position: String): [Player]!
  findUsers(search: String!): [User]!
  searchSubjects(search: String!): [SubjectUnion]!
}

type Mutation {
  signOut: Boolean!
  viewProfile(sync: Boolean!): User!
  updateUser(changes: ProfileChanges!): User!
  createBet(changes: NewBet!): Bet
  acceptBet(id: ID!, accept: Boolean!): Boolean!
  postRotoArticle: Boolean!
}

type Subscription {
  subscribeUserNotifications: User!
}

# inputs

input ProfileChanges {
  name: String
  userName: String
  password: String
}

input NewBet {
  betRecipient: BetRecipient!
  newEquations: [NewEquation]!
}

input BetRecipient {
  userId: String
  twitterScreenName: String
}

input NewEquation {
  operatorId: Int
  newExpressions: [NewExpression]!
}

input NewExpression {
  id: Int!
  type: String!
  isLeft: Boolean!
  playerId: String
  gameId: String
  teamId: String
  metricId: Int
  value: Float
}

scalar Timestamp

scalar BetStatus

# directive @makeNil on FIELD_DEFINITION
# directive @makeTypedNil on FIELD_DEFINITION

directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

# directive @goField(
#   forceResolver: Boolean
#   name: String
# ) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
