# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# settings

type BetMap {
  id: Int!
  name: String!
}

type LeagueSettings {
  id: String!
  currentYear: Int!
  currentWeek: Int!
  playerBets: [BetMap]!
  teamBets: [BetMap]!
  betEquations: [BetMap]!
}

# betting

type Bet {
  id: ID!
  createdAt: Timestamp
  sourceFk: String!
  proposer: User
  recipient: User
  acceptFk: String
  proposerReplyFk: String
  recipientReplyFk: String
  expiresAt: Timestamp
  finalizedAt: Timestamp
  equations: [Equation]!
  betStatus: BetStatus
  betResult: BetResult
}

type Equation {
  id: Int!
  expressions: [PlayerExpression]
  operator: BetMap
  result: Boolean
}

type PlayerExpression {
  id: Int!
  isLeft: Boolean!
  player: Player
  game: Game
  value: Float
  metric: BetMap
}

type Player {
  id: ID!
  name: String!
  firstName: String!
  lastName: String!
  fk: String!
  teamFk: String
  teamName: String
  teamShort: String
  position: String
  url: String
  game: Game
}

type Game {
  id: ID!
  name: String!
  fk: String
  url: String
  awayTeamFk: String
  awayTeamName: String
  homeTeamFk: String
  homeTeamName: String
  gameTime: Timestamp
  gameResultsAt: Timestamp
  final: Boolean
  week: Int
  year: Int
}

type BetResult {
  winner: User!
  loser: User!
  response: String!
  responseFk: String
  decidedAt: Timestamp!
}

type User {
  id: Int!
  screenName: String!
  name: String!
  idStr: String!
  indices: [Int]
}

# chatting

type Chatroom {
  name: String!
  messages: [Message!]!
}

type Message {
  id: ID!
  text: String!
  createdBy: String!
  createdAt: Timestamp!
}

# rotoworld

type RotoArticle {
  id: ID!
  imgSrc: String
  playerName: String!
  position: String
  team: String
  title: String!
  article: String!
  scrapedAt: Timestamp
}

# graphql

type Query {
  leagueSettings(id: String!): LeagueSettings!
  bets: [Bet!]!
  bet(id: ID!): Bet
  currentRotoArticles(id: String!): [RotoArticle]!
  findGames(team: String, gameTime: Timestamp, week: Int, year: Int): [Game]!
  findPlayers(
    name: String
    team: String
    position: String
    withGame: Boolean
  ): [Player]!
  room(name: String!): Chatroom
}

type Mutation {
  createBet(changes: BetChanges!): Bet
  updateBet(id: ID!, changes: BetChanges!): Bet
  post(text: String!, username: String!, roomName: String!): Message!
  postRotoArticle: RotoArticle!
}

type Subscription {
  messageAdded(roomName: String!): Message!
  rotoArticleAdded: RotoArticle!
}

# inputs

input BetChanges {
  equationsChanges: [EquationChanges]!
}

input EquationChanges {
  id: Int
  delete: Boolean
  operatorId: Int
  expressionChanges: [PlayerExpressionChanges]
}

input PlayerExpressionChanges {
  id: Int
  delete: Boolean
  isLeft: Boolean
  playerFk: String
  gameFk: String
  metricId: Int
}

scalar Timestamp

scalar BetStatus

directive @user(username: String!) on SUBSCRIPTION
